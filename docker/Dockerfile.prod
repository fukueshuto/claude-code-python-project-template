# syntax=docker/dockerfile:1

# Production Dockerfile - minimal and optimized
# Extends the existing production Dockerfile with additional tooling

ARG BUILDER_IMAGE="ubuntu:24.04"
ARG RUNNER_IMAGE="mcr.microsoft.com/devcontainers/base:ubuntu"

FROM $BUILDER_IMAGE AS builder

ENV DEBIAN_FRONTEND=noninteractive \
    UV_PYTHON_INSTALL_DIR="/opt/python" \
    UV_PROJECT_ENVIRONMENT="/opt/venv" \
    UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy

RUN rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    ca-certificates

COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv
WORKDIR /app

# Sync dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    --mount=type=bind,source=.python-version,target=.python-version \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    ulimit -n 8192 \
    && uv sync --locked --no-install-project --no-editable

# Sync this project
COPY . .
RUN --mount=type=cache,target=/root/.cache/uv \
    ulimit -n 8192 \
    && uv sync --locked --no-editable

FROM $RUNNER_IMAGE AS production

ENV DEBIAN_FRONTEND=noninteractive \
    PATH="/opt/venv/bin:$PATH" \
    UV_PYTHON_INSTALL_DIR="/opt/python" \
    UV_PROJECT_ENVIRONMENT="/opt/venv" \
    UV_CACHE_DIR="/opt/.cache/uv" \
    UV_LINK_MODE=copy \
    UV_COMPILE_BYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONOPTIMIZE=1 \
    DISPLAY=""

# Set working directory to match development environment
WORKDIR /workspaces/claude-code-python-project-template

# Copy Python environment from builder
COPY --from=builder /opt/python /opt/python
COPY --from=builder /opt/venv /opt/venv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Use vscode user (already exists in base image)
USER root

# Install minimal production dependencies
RUN rm -f /etc/apt/apt.conf.d/docker-clean \
    && echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    ca-certificates \
    # Essential runtime tools only
    jq \
    && rm -rf /var/lib/apt/lists/*

# Copy application files
COPY --from=builder /app /workspaces/claude-code-python-project-template

# Set proper permissions and create necessary directories
RUN chown -R vscode:vscode /workspaces/claude-code-python-project-template \
    && mkdir -p /opt/.cache/uv \
    && chown -R vscode:vscode /opt/.cache

# Switch to vscode user for production
USER vscode

# Copy and set up initialization script
COPY docker/init.sh /usr/local/bin/init.sh
RUN chmod +x /usr/local/bin/init.sh

# Health check for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys; print('Health: OK'); sys.exit(0)" || exit 1

# Set up entrypoint to run initialization script
ENTRYPOINT ["/usr/local/bin/init.sh"]
CMD ["python", "main.py"]